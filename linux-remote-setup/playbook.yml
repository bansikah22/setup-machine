---
- name: Setup remote Linux development environment
  hosts: all
  become: true

  vars:
    common_packages:
      - git
      - zsh
      - curl
      - wget
      - htop
      - tmux
      - vim
      - python3
      - python3-pip
      - make
      - gcc
      - jq
      - tree
      - neofetch
      - build-essential  # For compiling from source
    # Distribution specific package names
    debian_ubuntu_packages:
      - ripgrep
      - fd-find
      - bat
      - fzf
      - default-jdk
      - golang
    ubuntu_specific_packages:
      - software-properties-common
      - pkg-config
      - libssl-dev
    debian_specific_packages:
      - build-essential
      - pkg-config
      - libssl-dev
    fedora_packages:
      - ripgrep
      - fd
      - bat
      - fzf
      - java-latest-openjdk
      - golang
      - openssl-devel
      - pkgconfig
    node_packages:
      ubuntu:
        - nodejs
        - npm
      debian:
        - nodejs
        - npm
      fedora:
        - nodejs
        - npm
    docker_packages:
      ubuntu: docker.io
      debian: docker.io
      fedora: docker-ce
    python_packages:
      - virtualenv
      - flake8
      - black
      - pylint

  tasks:
    # Distribution detection
    - name: Set distribution facts
      set_fact:
        is_ubuntu: "{{ ansible_distribution == 'Ubuntu' }}"
        is_debian: "{{ ansible_distribution == 'Debian' }}"
        is_fedora: "{{ ansible_distribution == 'Fedora' }}"

    # Package manager updates
    - name: Update apt cache (Ubuntu)
      apt:
        update_cache: yes
      when: is_ubuntu

    - name: Update apt cache (Debian)
      apt:
        update_cache: yes
      when: is_debian

    - name: Update dnf cache (Fedora)
      dnf:
        update_cache: yes
      when: is_fedora

    # Install common packages
    - name: Install common packages (Ubuntu/Debian)
      apt:
        name: "{{ common_packages }}"
        state: present
      when: is_ubuntu or is_debian

    - name: Install common packages (Fedora)
      dnf:
        name: "{{ common_packages }}"
        state: present
      when: is_fedora

    # Install distribution-specific packages
    - name: Install Ubuntu-specific packages
      apt:
        name: "{{ ubuntu_specific_packages }}"
        state: present
      when: is_ubuntu

    - name: Install Debian-specific packages
      apt:
        name: "{{ debian_specific_packages }}"
        state: present
      when: is_debian

    - name: Install Debian/Ubuntu shared packages
      apt:
        name: "{{ debian_ubuntu_packages }}"
        state: present
      when: is_ubuntu or is_debian

    - name: Install Fedora-specific packages
      dnf:
        name: "{{ fedora_packages }}"
        state: present
      when: is_fedora

    # Install Node.js and npm
    - name: Install Node.js and npm (Ubuntu)
      apt:
        name: "{{ node_packages.ubuntu }}"
        state: present
      when: is_ubuntu

    - name: Install Node.js and npm (Debian)
      apt:
        name: "{{ node_packages.debian }}"
        state: present
      when: is_debian

    - name: Install Node.js and npm (Fedora)
      dnf:
        name: "{{ node_packages.fedora }}"
        state: present
      when: is_fedora

    # Docker setup
    - name: Add Docker GPG key (Ubuntu)
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      when: is_ubuntu

    - name: Add Docker repository (Ubuntu)
      apt_repository:
        repo: "deb [arch={{ ansible_architecture }}] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
      when: is_ubuntu

    - name: Add Docker GPG key (Debian)
      apt_key:
        url: https://download.docker.com/linux/debian/gpg
        state: present
      when: is_debian

    - name: Add Docker repository (Debian)
      apt_repository:
        repo: "deb [arch={{ ansible_architecture }}] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable"
        state: present
      when: is_debian

    - name: Add Docker repository (Fedora)
      dnf:
        name: dnf-plugins-core
        state: present
      when: is_fedora

    - name: Add Docker repository config (Fedora)
      shell: |
        dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo
      when: is_fedora

    - name: Install Docker (Ubuntu)
      apt:
        name: "{{ docker_packages.ubuntu }}"
        state: present
      when: is_ubuntu

    - name: Install Docker (Debian)
      apt:
        name: "{{ docker_packages.debian }}"
        state: present
      when: is_debian

    - name: Install Docker (Fedora)
      dnf:
        name: "{{ docker_packages.fedora }}"
        state: present
      when: is_fedora

    # Install Oh My Zsh for remote user
    - name: Get remote user home directory
      shell: echo $HOME
      register: user_home
      become: false
      changed_when: false

    - name: Check if Oh My Zsh is installed
      stat:
        path: "{{ user_home.stdout }}/.oh-my-zsh"
      register: oh_my_zsh_installed
      become: false

    - name: Install Oh My Zsh
      shell: |
        sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
      args:
        creates: "{{ user_home.stdout }}/.oh-my-zsh"
      become: false
      when: 
        - not oh_my_zsh_installed.stat.exists
        - shell_settings.oh_my_zsh.install

    # Set Zsh as default shell
    - name: Set Zsh as the default shell
      user:
        name: "{{ ansible_user }}"
        shell: "{{ shell_settings.default_shell }}"
      when: shell_settings.oh_my_zsh.install

    # Install Powerlevel10k theme
    - name: Clone Powerlevel10k theme
      git:
        repo: https://github.com/romkatv/powerlevel10k.git
        dest: "{{ user_home.stdout }}/.oh-my-zsh/custom/themes/powerlevel10k"
        depth: 1
      become: false
      when: shell_settings.oh_my_zsh.install

    # Configure Zsh theme
    - name: Set Powerlevel10k as default Zsh theme
      lineinfile:
        path: "{{ user_home.stdout }}/.zshrc"
        regexp: '^ZSH_THEME=.*'
        line: 'ZSH_THEME="{{ shell_settings.oh_my_zsh.theme }}"'
        create: yes
      become: false
      when: shell_settings.oh_my_zsh.install

    # Install Python virtualenv
    - name: Install virtualenv via pip
      pip:
        name: virtualenv
        state: present
      become: false

    # Enhanced security setup for remote machines
    - name: Install UFW (Ubuntu)
      apt:
        name: ufw
        state: present
      when: 
        - is_ubuntu
        - security_settings.ufw_enabled

    - name: Install firewalld (Fedora)
      dnf:
        name: firewalld
        state: present
      when: 
        - is_fedora
        - security_settings.ufw_enabled

    - name: Configure UFW (Ubuntu)
      block:
        - name: Allow SSH through UFW
          ufw:
            rule: allow
            port: 22
            proto: tcp
        - name: Enable UFW
          ufw:
            state: enabled
      when: 
        - is_ubuntu
        - security_settings.ufw_enabled

    - name: Configure firewalld (Fedora)
      block:
        - name: Start and enable firewalld
          service:
            name: firewalld
            state: started
            enabled: yes
        - name: Allow SSH through firewalld
          firewalld:
            service: ssh
            permanent: yes
            state: enabled
      when: 
        - is_fedora
        - security_settings.ufw_enabled

    # Configure SSH security
    - name: Configure SSH for security
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      loop:
        - { regexp: '^PermitRootLogin', line: 'PermitRootLogin {{ "yes" if security_settings.ssh_settings.permit_root_login else "no" }}' }
        - { regexp: '^PasswordAuthentication', line: 'PasswordAuthentication {{ "yes" if security_settings.ssh_settings.password_authentication else "no" }}' }
        - { regexp: '^PubkeyAuthentication', line: 'PubkeyAuthentication {{ "yes" if security_settings.ssh_settings.pubkey_authentication else "no" }}' }
      notify: Restart SSH

  handlers:
    - name: Restart SSH
      service:
        name: sshd
        state: restarted